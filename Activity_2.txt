2. Implement a generic swap function
typedef struct Student
{
	char a[10];
	int b;
	double c;
} Student;

int main()
{
	int i1 = 10, i2 = 20;
	float f1 = 1.6, f2 = 8.9;
	int a1[3] = {1, 2, 3}, a2[3] = {10, 20, 30};
	Student s1 = {"Adil", 42, 5.2}, s2 = {"Bilal", 9, 3};

	generic_swap(i1, i2 -> Swap i1 and i2 -> 20 and 10	
}

Ans -

#include <stdio.h>
#include <string.h>

typedef struct Student {
    char a[10];
    int b;
    double c;
} Student;

// Generic swap function using void pointers
void generic_swap(void *ptr1, void *ptr2, size_t size) {
    char temp[size];
    memcpy(temp, ptr1, size);
    memcpy(ptr1, ptr2, size);
    memcpy(ptr2, temp, size);
}

int main() {
    int i1 = 10, i2 = 20;
    float f1 = 1.6, f2 = 8.9;
    int a1[3] = {1, 2, 3}, a2[3] = {10, 20, 30};
    Student s1 = {"Adil", 42, 5.2}, s2 = {"Bilal", 9, 3};

    // Test swapping integers
    generic_swap(&i1, &i2, sizeof(int));
    printf("i1 = %d, i2 = %d\n", i1, i2);  // Output: i1 = 20, i2 = 10

    // Test swapping floats
    generic_swap(&f1, &f2, sizeof(float));
    printf("f1 = %.1f, f2 = %.1f\n", f1, f2);  // Output: f1 = 8.9, f2 = 1.6

    // Test swapping arrays
    generic_swap(&a1, &a2, sizeof(a1));
    printf("a1 = {%d, %d, %d}, a2 = {%d, %d, %d}\n", a1[0], a1[1], a1[2], a2[0], a2[1], a2[2]);
    // Output: a1 = {10, 20, 30}, a2 = {1, 2, 3}

    // Test swapping structs
    generic_swap(&s1, &s2, sizeof(Student));
    printf("s1: {a: %s, b: %d, c: %.1f}, s2: {a: %s, b: %d, c: %.1f}\n", s1.a, s1.b, s1.c, s2.a, s2.b, s2.c);
    // Output: s1: {a: Bilal, b: 9, c: 3.0}, s2: {a: Adil, b: 42, c: 5.2}

    return 0;
}
